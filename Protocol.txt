================================================================
Messaging Protocol for the tunnel.

Tunnel Messages:
//----------------------------------------------------------------
    Download:
        Input:
            JSON config
            --form:
                {
                    fileName: STRING    //output filename of the file
                    ,fileLength: INT    //final size of the file
                    ,chunkLength: INT   //maximum chunk length
                }
            --event: on start
            --event: ANYTIME before the downloading starts
            DATA of next chunk of the file
            --event: next;
        Output:
            key;FILE_DOWNLOAD_KEY
            --event: first file config applied
            next;
            --event: when the previous chunk of the file will be delivered.
            --expects: DATA format of the next file chunk.
        Close:
        --event: when key expires
        --event2: when idle (optional)
//----------------------------------------------------------------
    Upload:
        Input: 
            JSON config
            --form:
                {
                    maxLength: INT    //maximum lenght of the whole transfer
                    ,chunkLength: INT //exact length of a single chunk
                }
            --event: on start
            next;
            --event: When the agent will write the chunk correctly.
        Output:
            key;FILE_UPLOAD_KEY
            --event: when the config will be accepted
            DATA of next requested chunk.
            --event: When the Client will send its chunk(earlier requested by Input: next;) and won't break the guidelines.
        Close:
        --event: when key expires
        --event2: when idle (optional)
        --event3: when earlier/internal restricions will be broken.
        --event4: when the client closes first
        --event5: when config will break the tunnel's guidelines
//----------------------------------------------------------------
    Upload(client):
        Input:
            DATA
            event: next;
        Output:
            next;
            --event: when the previous chunk of the file will be delivered
            --event2: when the first chunk is demanded
        Close;
        --event: when idle.
        --event2: when the client will break the rule of not waiting for a permission to send.
        --event3: when the client will send a message of length greater than the earlier set chunk lenght
//----------------------------------------------------------------
Tunnel API:

/
--Form: HTML
--Info: Public info page.

/download/KEY
--Form: ANY
--Info: A download tunnel which allows the user to download the content once.

================================================================
Messaging Protocol for the tunnel agent.

Panel:

/panel*
--Form: HTML / JS / CSS / Any...
--Info: A content related to the user friendly magament manual panel

Agent API:

/info
--Form: JSON
--Info: A data about the tunnel (middle man)
--Example:
    {
        address: STRING
        useSSL: BOOLEAN
    }

/list
--Form: JSON
--Info: A data about the current handled sessions
--Example:
    {
        DownloadService:[
            //session
            {
                key: STRING
                ,targetFile: STRING
                ,fileName: STRING
                ,offset: INT //current offset/position of the file reader
                ,length: INT //total length of the target file.
            }
        ]
        ,UploadService:[
            //session
            {
                key: STRING;
                ,targetFile: STRING 
                ,targetLength: INT //target amount of DATA to be over/-written
                ,length: INT //Amount of data that has been received.
            }
        ]
    }

/killDownload/$key
/killUpload/$key
--Form: TRUE/FALSE
--Info: Kills a specific listed connection on a specific service.

/startDownload/$targetFile/$fileName
--Form: JSON
--Info: Opens a download connection and handles the specific $targetFile transfer.
--Input: $targetFile and $fileName are encoded using JS encodeURIComponent function.
--Example:
    {
        key: STRING
    }
--Example2:
    {
        error: STRING //Failure cause
    }

/startUpload/$config
--Form: JSON
--Info: Opens a download connection and handles the specific $targetFile transfer.
        It is also important to note that a file can be written only by one session and NOT MULTIPLE.
--Input: $config are encoded using JS encodeURIComponent function.
----$config contains JSON config
------Config:
        {
            outputPath: STRING //relative output file path of the transfered file
            ,maxFileSize: INT //maximum size of the all summed chunks' lengths (used by the tunnel, to block the client from sending more than actually needs)
            ,chunkLenght: INT //length of a single chunk transfered by the client, through the tunnel
            //OPTIONAL ONLY:
            ,lock: BOOLEAN //lock file from being written by someone else
        }
--Example:
    {
        key: STRING
    }
--Example2:
    {
        error: STRING //Failure cause
    }

================================================================
Potential example plan for download service for client.

1. Request the internal API for a BLOB.
    1. Do internal security checks.
    2. Call the Tunnel Agent to open a file stream and the tunnel.
    3. Get the key.
    *3. Return to the client with a problem of being over-tasked or currently unavailable. 
2. Return a link to the tunnel with the key in a link.
3. Send the client to download a file from this url.

================================================================
Potential example plan of upload service for client.

1. Check if the user can upload. (Client side JS, based on previously sent data)
2. Request an upload key and tunnel source.
    1. Check the maximum potential upload size
    2. Check the demanded upload size
    3. Get the key, by calling
    *3. Return the access denied
    4. Return the key
    *4. Return the access denied
3. Get the Upload key
*3. Access Denied
4. Start uploading (through WS)