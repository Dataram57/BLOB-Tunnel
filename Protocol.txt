================================================================
Messaging Protocol for the tunnel.

Tunnel Messages:
//----------------------------------------------------------------
    Download:
        Input:
            JSON config
            --event: on start
            --event: ANYTIME before the downloading starts
            DATA of next chunk of the file
            --event: nextchunk;
        Output:
            key;FILE_DOWNLOAD_KEY
            --event: first file config applied
            nextchunk;
            --event: when the previous chunk of the file will be delivered.
            --expects: DATA format of the next file chunk.
        Close:
        --event: when key expires
        --event2: when idle (optional)
//----------------------------------------------------------------
    Upload:
        Input: 
            JSON config
            --event: on start
            nextchunk;
            --event: When the agent will write the chunk correctly.
        Output:
            key;FILE_UPLOAD_KEY
            --event: when the config will be accepted
            DATA of next requested chunk.
            --event: When the Client will send its chunk(earlier requested by Input: nextchunk;) and won't break the guidelines.
        Close:
        --event: when key expires
        --event2: when idle (optional)
        --event3: when earlier/internal restricions will be broken.
//----------------------------------------------------------------
    Upload(client):
        Input:
            JSON file info
            --event: on start
            DATA
            event: nextchunk;
        Output:
            nextchunk;
            --event: when the previous chunk of the file will be delivered.
            --event2: when the file info will be accepted by the initiator(Tunnel Agent).
        Close;
        --event: when idle.
        --event2: when the file info will not be accepted by the initiator(Tunnel Agent).
        --event3: when the client will break the rule of not waiting for a permission to send.
//----------------------------------------------------------------

Tunnel API:

/
--Form: HTML
--Info: Public info page.

/download/KEY
--Form: ANY
--Info: A download tunnel which allows the user to download the content once.



================================================================
Messaging Protocol for the tunnel agent.

Agent API:

/panel*
--Form: HTML / JS / CSS
--Info: A content related to the user friendly magament manual panel

/list
--Form: JSON
--Info: A data about the current handled sessions
--Example:
    {
        DownloadService:[
            //session
            {
                key: STRING
                ,targetFile: STRING 
                ,progress: INT //current chunk position of the file
                ,leftProgress: INT //length of the target file - 1
            }
        ]
        ,UploadService:[
            //session
            {
                key: STRING;
                ,targetFile: STRING 
                ,targetLength: INT //target amount of DATA to be over/-written
                ,leftLength: INT //left amount of DATA to be recieved and written.
            }
        ]
    }

================================================================
Potential example plan for download service for client.

1. Request the internal API for a BLOB.
    1. Do internal security checks.
    2. Call the Tunnel Agent to open a file stream and the tunnel.
    3. Get the key.
    *3. Return to the client with a problem of being over-tasked or currently unavailable. 
2. Return a link to the tunnel with the key in a link.
3. Send the client to download a file from this url.

================================================================
Potential example plan of upload service for client.

1. Check if the user can upload. (Client side JS, based on previously sent data)
2. Request an upload key and tunnel source.
    1. Check the maximum potential upload size
    2. Check the demanded upload size
    3. Get the key, by calling
    *3. Return the access denied
        1. Check the current cound of opened sessions
        2. Check the file
        3. Try to connect to the tunnel
        4. Return the invite key
        *4. Return the access denied
    4. Return the key
    *4. Return the access denied
3. Get the Upload key
*3. Access Denied
4. Start uploading